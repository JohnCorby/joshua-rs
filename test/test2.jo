<{
#include <stdio.h>
}>

struct baba_booey {
    f32 hello
}
struct im {
    baba_booey pain

//    void fuck() {}
}

void hello(i32 what) {
    // fixme no return statement should be treated as void return, which should error
}

im gimme_im() {
    <{
        im im = { 69 };
        return im;
    }>
}

/// pretend this is a method of baba_booey
//f32 baba_booey.kill_yourself(baba_booey this) {
//
//}

i32 ok = 2 as i32

i32 main() {
    for (u8 i = 0 as u8; i < 10 as u8; i = i + 1 as u8)
        break

    if (true) {
        i8 t0
        u8 t1
        i16 t2
        u16 t3
        i32 t4
        u32 t5
        i64 t6
        u64 t7
        f32 t8
        f64 t9
        bool t10
        char t11
//        void t12 = 1 as void
    }

    f32 i = 1 as f32
    f32 e = 1 as f32 + i as f32 / 2 as f32
    u8 bruh = (1 as u8 + 1 as u8 + 1 as u8) + (2 as u8 + 2 as u8)

    baba_booey ok
    f32 woah = ok.hello
    f32 woah2 = gimme_im().pain.hello
    <{printf("woah2 is %f\n", woah2)}>
//    ok.hello = 1 as f32
//    f32 yo = gimme_im().pain.kill_yourself(1, 2.0, true, 'd')

    hello(4 as i32)

//    u32 test = ((1 as u16) + (2 as u16)) as u32 + <{&${ok}}>
    f32 test2 = (1 as f32) + (2 as f32)

    <{puts("you are a poopy head")}>
//    <{
//        char *oh_no = 0;
//        int uh = (int) *oh_no;
//    }>
    if (true) {
        // todo rvalues are literally just expressions that are assignable
        //  which seems to be non-fancy types, which means derefed types and array get types also work
        <{
//            int* i2 = &i;
//            (0, *i2) = 2;
        }>
    }


    return 1337 as i32
}
