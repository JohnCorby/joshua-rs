<{
#include <stdio.h>
}>

generic T template_func<generic T>(generic T a) {
    return a + a
}
// fixme this will be found when doing `template_func<f32>(1 as f32)`
//void template_func<generic T>(generic T a, generic T b) {}
void template_func(i32 a) {}

struct baba_booey {
    f32 hello
}
struct im {
    struct baba_booey pain

//    void fuck() {}
}

void `raw ident`(i32 what) {
}
void `raw`() {}
//void raw() {}
//i32 `+`(i32 a, i32 b) {
//    return a + b
//}

struct im gimme_im() {
    struct im im
    im.pain.hello = 23 as f32
    return im
}

/// pretend this is a method of baba_booey
f32 kill_yourself(struct baba_booey this, i32 a, f32 b, bool c, char d) {
    <{puts("woah! this is the method kill_yourself of baba_booey")}>

    template_func<f32>(1 as f32)
    // fixme?: this will just find the previously-generated template_func(f32)
    template_func<i32>(1 as f32)

    return 11565 as f32
}
f32 kill_yourself(struct baba_booey this, i32 a, f32 b) {
    <{puts("woah! this is the method kill_yourself but the other one of baba_booey")}>
    return 4915.95010 as f32
}
f32 `+`(struct baba_booey a, struct baba_booey b)
    return a.hello + b.hello

i32 ok = 2 as i32

i32 main() {
    for (u8 i = 0 as u8; i < 10 as u8; i = i + 1 as u8)
        break

    if (true) {
        i8 t0
        u8 t1
        i16 t2
        u16 t3
        i32 t4
        u32 t5
        i64 t6
        u64 t7
        f32 t8
        f64 t9
        bool t10
        char t11
//        void t12
    }

    f32 i = 1 as f32
    f32 e = 1 as f32 + i as f32 / 2 as f32
    u8 bruh = (1 as u8 + 1 as u8 + 1 as u8) + (2 as u8 + 2 as u8)

    struct baba_booey ok
    f32 woah = ok.hello
    f32 woah2 = gimme_im().pain.hello
    <{printf("woah2 is %f\n", ${woah2})}>
    <{printf("ok.hello is %f\n", ${ok.hello})}>
    ok.hello = 1 as f32
    <{printf("ok.hello is %f\n", ${ok.hello})}>
    f32 yo = gimme_im().pain.kill_yourself(1 as i32, 2.0 as f32, true, 'd')
    <{printf("yo is %f\n", ${yo})}>
    f32 yo2 = gimme_im().pain.kill_yourself(1 as i32, 2.0 as f32)
    <{printf("yo2 is %f\n", ${yo2})}>

    (4 as i32).`raw ident`()
    `raw ident`(4 as i32)
    f32 `lets go` = ok + ok
    i32 two = `+`(1 as i32, 1 as i32)
    <{printf("1 + 1 is %i\n", ${two})}>

    u32 test = ((1 as u16) + (2 as u16)) as u32 + <{&${ok}}> as u32
    f32 test2 = (1 as f32) + (2 as f32)

    template_func<f32>(1 as f32)
    template_func<f32>(1 as f32)

    <{puts("you are a poopy head")}>
//    <{
//        char* ptr = (char*) 0;
//        puts(*ptr);
//    }>
//    main()

    return 1337 as i32
}
