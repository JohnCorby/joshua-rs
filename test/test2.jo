void f(i8 a) {}
void f(i8 a, i8 b) {}

void f<T>(T a) {}
void f<T>(T a, T b) {}

struct S {
    i32 n
}

T `+`<T>(T a, T b) {
    T c
    c.n = a.n + b.n
    ret c
}

void bruh<T>(T a) bruh<T>(a)


struct str {
    ptr<u8> ptr
    u64 len

    // FIXME since these are created in struct "scope", they get destroyed out of the struct and so are useless, oops
    str new(ptr<u8> ptr) {
        str result
        result.ptr = ptr
        result.len = 1 as u64

        auto chr = <{ *${ptr} }> as u8
        until(chr == 0 as u8) {
            result.len = result.len + 1 as u64
                    <{ ${ptr}++ }>
            chr = <{ *${ptr} }> as u8
        }

        ret result
    }

    void debug_print(str this)
        <{ printf("%p %i %s\n", ${this.ptr}, ${this.len}, ${this.ptr}) }>
}



//struct sized_ptr<T> {
//    ptr<T> ptr
//    u64 len
//}

//struct Hello<T> {
//    T field
//}
//
//void take(Hello<i8> arg) {}
////void take_cooler<T>(Hello<T> arg) {}


i32 main() {
    f(1 as i8)
    f(1 as i8, 2 as i8)

    f<i16>(1 as i16)
    f<i16>(1 as i16, 2 as i16)

    S s
    `+`<S>(s, s)

    bruh<i8>(1 as i8)
    bruh<i8>(1 as i8)



//    str str
//    str.ptr = "hello"
//    str.len = 6
    str str = `str::new`("beautiful")
    str.debug_print()
//    ptr<u8> ptr = "hello"
//    <{ puts(${ptr}) }>



//    Hello<i8> hello
//    take(hello)





    ret 0 as i32
}
