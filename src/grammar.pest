program = { SOI ~ define* ~ EOI }

define = _{
    struct_define
    | func_define
    | var_define
}

statement = _{
    ret
    | brk
    | cont
    | iff
    | until
    | forr
    | func_call
    | var_assign
    | var_define
}




block = { statement | "{" ~ statement* ~ "}" }

func_define = { ty ~ ident ~ "(" ~ (var_define ~ ("," ~ var_define)*)? ~ ")" ~ block }
func_call = { ident ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }


var_define = { ty ~ ident ~ ("=" ~ expr)? }
var_assign = { ident ~ "=" ~ expr }


struct_define = { "struct" ~ ident ~ "{" ~ define* ~ "}" }


iff = { "if" ~ "(" ~ expr ~ ")" ~ block ~ ("else" ~ block)? }
until = { "until" ~ "(" ~ expr ~ ")" ~ block }
forr = { "for" ~ "(" ~ var_define ~ ";" ~ expr ~ ";" ~ statement ~ ")" ~ block }


ret = { "return" ~ expr? }
brk = { "break" }
cont = { "continue" }



ty = { primitive | ident }
primitive = {
    "i8"
    | "u8"
    | "i16"
    | "u16"
    | "i32"
    | "u32"
    | "i64"
    | "u64"
    | "f32"
    | "f64"
    | "bool"
    | "void"
}


expr = { equality_expr }
equality_expr = { compare_expr ~ (equality_op ~ compare_expr)* }
equality_op = { "==" | "!=" }
compare_expr = { add_expr ~ (compare_op ~ add_expr)* }
compare_op = { "<" | "<=" | ">" | ">=" }
add_expr = { mul_expr ~ (add_op ~ mul_expr)* }
add_op = { "+" | "-" }
mul_expr = { cast_expr ~ (mul_op ~ cast_expr)* }
mul_op = { "*" | "/" | "%" }
cast_expr = { unary_expr ~ ("as" ~ ty)* }
unary_expr = { unary_op* ~ primary_expr}
unary_op = { "-" | "!" }
primary_expr = _{
    literal
    | func_call
    | ident
    | paren_expr
}
literal = _{
    float_literal
    | int_literal
    | bool_literal
    | char_literal
    | str_literal
}
paren_expr = _{ "(" ~ expr ~ ")" }




int_literal = @{ ASCII_DIGIT+ }
float_literal = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT* }
bool_literal = @{ "true" | "false" }

char_literal = ${ "'" ~ char_literal_inner ~ "'" }
char_literal_inner = @{ char }
str_literal = ${ "\"" ~ str_literal_inner ~ "\"" }
str_literal_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\'" | "\"" | "\\" | "n" | "r" | "t" | "0")
    | "\\" ~ "x" ~ ASCII_HEX_DIGIT{2}
    | "\\" ~ "u" ~ ASCII_HEX_DIGIT{4}
}


ident = @{ (LETTER | "_") ~ (LETTER | ASCII_DIGIT | "_")* }




WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ comment | block_comment }
comment = {"//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE}
block_comment = {"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
